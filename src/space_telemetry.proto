syntax = "proto3";

package space_telemetry;

// Telemetry data message
message TelemetryData {
  string spacecraft_id = 1;
  double timestamp = 2;
  double position_x = 3;
  double position_y = 4;
  double position_z = 5;
  double velocity_x = 6;
  double velocity_y = 7;
  double velocity_z = 8;
  double temperature = 9;
  
  // Existing fields
  double radiation_level = 10;
  double energy_level = 11;
  string mode = 12;          // NORMAL, SAFE, SCIENCE, COMMS, MAINTENANCE
  string alert_level = 13;   // NOMINAL, WARNING, CRITICAL
  
  // New orbital parameters
  double orbit_angle = 14;    // Current position in orbit (radians)
  
  // Enhanced realism features
  double doppler_shift = 15;           // Signal frequency change due to relative velocity
  bool occultation = 16;               // Whether Mars is blocking line of sight
  double bit_error_rate = 17;          // Error rate affected by radiation and distance
  double signal_strength = 18;         // Signal strength considering distance and conditions
  repeated string anomalies = 19;      // List of any anomalies detected
  
  // Spacecraft attitude (orientation)
  double roll = 20;                    // Roll angle in degrees
  double pitch = 21;                   // Pitch angle in degrees
  double yaw = 22;                     // Yaw angle in degrees
}

// Command message from edge to spacecraft
message Command {
  string spacecraft_id = 1;
  string command_type = 2;   // MODE_CHANGE, TRAJECTORY_ADJUST, POWER_MANAGEMENT, etc.
  map<string, string> parameters = 3;  // Flexible parameters for different commands
  double timestamp = 4;
}

// Response message
message TelemetryResponse {
  string status = 1;
  string message = 2;
  repeated Command commands = 3;  // Commands to be executed by spacecraft
}

// Telemetry service definition
service TelemetryService {
  rpc SendTelemetry (TelemetryData) returns (TelemetryResponse) {}
}